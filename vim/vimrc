runtime my-vim-settings/myvim_init.vim
set rtp^=~/.vim
set rtp+=~/.vim/after

" -------------------------------------------------------------------
" vim plug for plugins management
" -------------------------------------------------------------------

call plug#begin('~/.vim/vimplug-plugs')
  Plug 'vim-airline/vim-airline'
  Plug 'vim-airline/vim-airline-themes'
  " Plug 'NLKNguyen/papercolor-theme'
  Plug 'romgrk/doom-one.vim'
  Plug 'ludovicchabant/vim-gutentags'
  " Plug 'SirVer/ultisnips'
  if !has('nvim')
    Plug 'roxma/nvim-yarp'
    Plug 'roxma/vim-hug-neovim-rpc'
    Plug 'jceb/vim-orgmode'
  else
    Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate'}
  endif
  Plug 'tpope/vim-surround'
  let g:myvim_has_coc=0
  if v:version > 812 || has('nvim-0.8')
    Plug 'neoclide/coc.nvim', {'branch': 'release'}
    let g:myvim_has_coc=1
  endif
  if has('nvim-0.8')
    Plug 'nvim-orgmode/orgmode'
  endif
  if v:version >= 901 || has('nvim-0.8')
    if !empty($GITHUB_COPILOT) && $GITHUB_COPILOT == "1"
      Plug 'github/copilot.vim'
      Plug 'CopilotC-Nvim/CopilotChat.nvim', { 'branch': 'canary' }
      Plug 'nvim-lua/plenary.nvim'
    endif
  endif
  Plug 'sheerun/vim-polyglot'
  Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
  Plug 'junegunn/fzf.vim'
  Plug 'webdevel/tabulous'
  Plug 'honza/vim-snippets'
  Plug 'tpope/vim-fugitive'
  "Plug 'dense-analysis/ale'
  Plug 'preservim/tagbar'
  Plug 'jiangmiao/auto-pairs'
call plug#end()

if has('nvim-0.8')
lua << EOF
require("CopilotChat").setup {
  debug = true, -- Enable debugging
  -- See Configuration section for rest
}
EOF
endif

" ------------------------------
" other setting
" ------------------------------
filetype plugin on
filetype indent on
syntax enable
syntax on
"if has('macunix')
"  set guifont=Source\ Code\ Pro:h12
"elseif has('nvim')
"  set guifont=Source\ Code\ Pro:h12
"  if readfile("/proc/version")[0] =~ "Microsoft"
"    set guifont=Monospace:h14
"  endif
"endif
if has('gui_running') || exists('g:GuiLoaded')
  "set guifont=Lucida_Console:h10
  "set guifont=Monaco:h10
  if has('win32')
    set guifont=Consolas:h8.9
  elseif has('macunix')
    set guifont=Monaco:h12
  elseif readfile("/proc/version")[0] =~ "Microsoft"
    if has('nvim')
      set guifont=DejaVu\ Sans\ Mono:h12
    else
      set guifont=DejaVu\ Sans\ Mono\ 10
    endif
  else
    set guifont=DejaVu\ Sans\ Mono:h12
  endif
  " if has('macunix')
  if has('macunix') && !has('nvim')
    set macmeta
  endif
  set guioptions-=e   " needed for tabline
  set guioptions-=m  "remove menu bar
  set guioptions-=T  "remove toolbar
  set guioptions-=r  "remove right-hand scroll bar
  set guioptions-=L  "remove left-hand scroll bar
  set lines=51
  set columns=209
endif

" setting terminal colors
if !has('nvim') && has('linux')
  if exists('+termguicolors')
    let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
    let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
    set termguicolors
  endif
else
  set termguicolors
endif

" ---------------------------------------------------------
"  set airline theme as well as colorscheme
" ---------------------------------------------------------
let g:python_highlight_all = 1
let g:airline_section_c='[FILENAME=%{strcharpart(expand("%:t"), 0, 12)}] [DEC=%b] [HEX=%B] [LINE=%.5l] [COL=%.5v]'
" let g:airline_theme='doom-one'
" let g:airline_theme='papercolor'
" let g:PaperColor_Theme_Options = {
"     \   'language': {
"     \       'python': {
"     \           'highlight_builtins': 1
"     \       }
"     \   }
"     \ }

set background=dark
"silent! colorscheme PaperColor

au BufWinEnter * silent! loadview | silent! exe "normal zR"
au BufWinLeave * silent! mkview!
" maximize windows in GUI
" au GUIEnter * simalt ~x

" finalize vim setting, vim has already loaded all packages at this time
runtime my-vim-settings/myvim_init_2.vim

let g:AutoPairsMapCh=1
let g:AutoPairsShortcutFastWrap=''
let g:AutoPairsMapSpace=1

"inoremap <buffer> <silent> <c-x>apf <C-R>=AutoPairsFastWrap()<CR>
"nnoremap <buffer> <silent> <c-x>apt :call AutoPairsToggle()<CR>
"inoremap <buffer> <silent> <C-x>apt <C-R>=AutoPairsToggle()<CR>

set nobackup
set nowritebackup

" Having longer updatetime (default is 4000 ms = 4 s) leads to noticeable
" delays and poor user experience.
set updatetime=500

" Always show the signcolumn, otherwise it would shift the text each time
" diagnostics appear/become resolved.
set signcolumn=yes

" -------------------------------
" change coc-setting
" -------------------------------
if exists('g:did_coc_loaded')
  let g:coc_global_extensions=
        \ [ 'coc-powershell', 'coc-pyright', 'coc-json', 'coc-vimlsp',
        \ 'coc-snippets' , 'coc-tsserver', 'coc-java', 'coc-prettier',
        \ 'coc-eslint' ]
  call myvim_mylib#SetCocPythonPath()
  call myvim_mylib#SetCocPowerShellExe()

  " -------------------------------
  "  coc.nvim settings
  " -------------------------------
  " Some servers have issues with backup files, see #649.

  " Use tab for trigger completion with characters ahead and navigate.
  " NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
  " other plugin before putting this into your config.
  inoremap <silent><expr> <TAB>
        \ coc#pum#visible() ? coc#_select_confirm() :
        \ coc#expandableOrJumpable() ?
        \ "\<C-r>=coc#rpc#request('doKeymap', ['snippets-expand-jump', ''])\<CR>" :
        \ <SID>check_back_space() ? "\<TAB>" :
        \ coc#refresh()
  function! s:check_back_space() abort
    let col = col('.') - 1
    return !col || getline('.')[col -1] =~# '\s'
  endfunction
  let g:coc_snippet_next = '<tab>'
  inoremap <expr><S-TAB> coc#pum#visible() ? coc#pum#prev(1) : "\<C-h>"

  " Make <CR> to accept selected completion item or notify coc.nvim to format
  " <C-g>u breaks current undo, please make your own choice.
  inoremap <silent><expr> <CR> (coc#pum#visible() && complete_info()["selected"] == -1) ? "\<c-g>u\<CR>\<c-r>=coc#on_enter()\<CR>" 
                                \: (coc#pum#visible() ? coc#pum#confirm() : "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>")
  " inoremap <silent><expr> <C-l> <Plug>(coc-snippets-expand)

  function! CheckBackspace() abort
    let col = col('.') - 1
    return !col || getline('.')[col - 1]  =~# '\s'
  endfunction

  " Use <c-space> to trigger completion.
  if has('nvim')
    inoremap <silent><expr> <c-space> coc#refresh()
  else
    inoremap <silent><expr> <c-@> coc#refresh()
  endif

  " Use `[g` and `]g` to navigate diagnostics
  " Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.
  nmap <silent> [g <Plug>(coc-diagnostic-prev)
  nmap <silent> ]g <Plug>(coc-diagnostic-next)

  " GoTo code navigation.
  nmap <silent> gd <Plug>(coc-definition)
  nmap <silent> gy <Plug>(coc-type-definition)
  nmap <silent> gi <Plug>(coc-implementation)
  nmap <silent> gr <Plug>(coc-references)

  " Use K to show documentation in preview window.
  nnoremap <silent> K :call ShowDocumentation()<CR>

  function! ShowDocumentation()
    if CocAction('hasProvider', 'hover')
      call CocActionAsync('doHover')
    else
      call feedkeys('K', 'in')
    endif
  endfunction

  " Highlight the symbol and its references when holding the cursor.
  autocmd CursorHold * silent call CocActionAsync('highlight')

  " Symbol renaming.
  nmap <leader>rn <Plug>(coc-rename)

  " Formatting selected code.
  xmap <leader>f  <Plug>(coc-format-selected)
  nmap <leader>f  <Plug>(coc-format-selected)
  nmap <leader>F  :call CocAction('runCommand', 'python.sortImports') <BAR> call CocAction('format')<CR>

  augroup mygroup
    autocmd!
    " Setup formatexpr specified filetype(s).
    autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
    " Update signature help on jump placeholder.
    autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
  augroup end

  " Applying codeAction to the selected region.
  " Example: `<leader>aap` for current paragraph
  xmap <leader>a  <Plug>(coc-codeaction-selected)
  nmap <leader>a  <Plug>(coc-codeaction-selected)

  " Remap keys for applying codeAction to the current buffer.
  nmap <leader>ac  <Plug>(coc-codeaction)
  " Apply AutoFix to problem on the current line.
  nmap <leader>qf  <Plug>(coc-fix-current)

  " Run the Code Lens action on the current line.
  nmap <leader>cl  <Plug>(coc-codelens-action)

  " Map function and class text objects
  " NOTE: Requires 'textDocument.documentSymbol' support from the language server.
  xmap if <Plug>(coc-funcobj-i)
  omap if <Plug>(coc-funcobj-i)
  xmap af <Plug>(coc-funcobj-a)
  omap af <Plug>(coc-funcobj-a)
  xmap ic <Plug>(coc-classobj-i)
  omap ic <Plug>(coc-classobj-i)
  xmap ac <Plug>(coc-classobj-a)
  omap ac <Plug>(coc-classobj-a)

  " Remap <C-f> and <C-b> for scroll float windows/popups.
  if has('nvim-0.4.0') || has('patch-8.2.0750')
    nnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
    nnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
    inoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(1)\<cr>" : "\<Right>"
    inoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(0)\<cr>" : "\<Left>"
    vnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
    vnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
  endif

  " Use CTRL-S for selections ranges.
  " Requires 'textDocument/selectionRange' support of language server.
  nmap <silent> <C-s> <Plug>(coc-range-select)
  xmap <silent> <C-s> <Plug>(coc-range-select)

  " Add `:Format` command to format current buffer.
  command! -nargs=0 Format :call CocActionAsync('format')

  " Add `:Fold` command to fold current buffer.
  command! -nargs=? Fold :call     CocAction('fold', <f-args>)

  " Add `:OR` command for organize imports of the current buffer.
  command! -nargs=0 OR   :call     CocActionAsync('runCommand', 'editor.action.organizeImport')

  " Add (Neo)Vim's native statusline support.
  " NOTE: Please see `:h coc-status` for integrations with external plugins that
  " provide custom statusline: lightline.vim, vim-airline.
  set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

  " Mappings for CoCList
  " Show all diagnostics.
  nnoremap <silent><nowait> <space>a  :<C-u>CocList diagnostics<cr>
  " Manage extensions.
  nnoremap <silent><nowait> <space>e  :<C-u>CocList extensions<cr>
  " Show commands.
  nnoremap <silent><nowait> <space>c  :<C-u>CocList commands<cr>
  " Find symbol of current document.
  nnoremap <silent><nowait> <space>o  :<C-u>CocList outline<cr>
  " Search workspace symbols.
  nnoremap <silent><nowait> <space>s  :<C-u>CocList -I symbols<cr>
  " Do default action for next item.
  nnoremap <silent><nowait> <space>j  :<C-u>CocNext<CR>
  " Do default action for previous item.
  nnoremap <silent><nowait> <space>k  :<C-u>CocPrev<CR>
  " Resume latest coc list.
  nnoremap <silent><nowait> <space>p  :<C-u>CocListResume<CR>
endif
