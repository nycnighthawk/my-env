#!/bin/bash
_init_path() {
    if [ -z "${MY_PATH_INIT}" ]
    then
        export ORIG_PATH=${PATH}
        export MY_PATH_INIT="MY_PATH_INIT"
    fi

    _PATH=${ORIG_PATH}

    if /bin/test ${_OS} = "Darwin"
    then
        if [ -d "/usr/local/opt/coreutils/libexec/gnubin" ]
        then
            _PATH=/usr/local/opt/coreutils/libexec/gnubin:${_PATH}
        fi
        if [ -d "/opt/homebrew/opt/openjdk/bin" ]
        then
            _PATH=${_PATH}:/opt/homebrew/opt/openjdk/bin
        fi
        if [ -d /opt/homebrew/bin ]
        then
            _PATH=/opt/homebrew/bin:${_PATH}
        fi
    fi

    if [ -d /opt/go ]
    then
        _PATH="/opt/go/bin":${_PATH}
    fi
    if [ -d ${HOME}/go ]
    then
        export GOPATH=${HOME}/go
        _PATH="${HOME}/go/bin":${_PATH}
    fi
    if [ -d "${HOME}/.poetry/bin" ]
    then
        _PATH="${HOME}/.poetry/bin":${_PATH}
    fi
    if [ -d "${HOME}/.dotnet/tools" ]
    then
        _PATH="${_PATH}:${HOME}/.dotnet/tools"
    fi
    echo "${ORIG_PATH}" | grep -q -i '/snap/bin'
    if [ "$?" != "0" ]
    then
        command snap > /dev/null 2>&1 && _PATH="/snap/bin:${_PATH}"
    fi
    export PATH=${HOME}/bin:${HOME}/.local/bin:/usr/local/bin:${_PATH}
    unset _PATH
    export NVM_DIR="$HOME/.nvm"
    [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
    [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion
    echo "update path environment"
}

_my_bash_wsl_libgl_init() {
    cat /proc/version | grep -q -i wsl
    if [ "$?" = "0" ]
    then
        export LIBGL_ALWAYS_INDIRECT=1
    fi
}

_my_bash_clean_up() {
    echo "customization done..."
}

_my_bash_init() {
    if [ -n "${BASH_VERSION}" ]
    then
        export _my_shell=bash
    elif [ -n "${ZSH_VERSION}" ]
    then
        export _my_shell=zsh
    else
        export _my_shell=other
    fi
    echo "shell: ${_my_shell}"
    echo "initialize"
    _OS=$(uname -s)
    export _OS
    VIRTUAL_ENV_DISABLE_PROMPT=1
    export VIRTUAL_ENV_DISABLE_PROMPT
    script_source=${BASH_SOURCE[0]:-${(%):-%x}}
    MY_BASH_ENV_DIR=$(dirname $(readlink -f ${script_source}))
    export MY_BASH_ENV_DIR
    if [ -d ~/.kube ]
    then
        KUBECONFIG="${HOME}/.kube/config"
        for config_file in $(ls ~/.kube)
        do
            if [ "${config_file}"!="${HOME}/.kube/config" ] && [ -f "${config_file}" ]
            then
                KUBECONFIG="${KUBECONFIG}:${config_file}"
            fi
        done
        export KUBECONFIG
    fi
    _init_path
    if [ "${_OS}" != "Darwin" ]
    then
        _my_bash_wsl_libgl_init
    fi
}

my_git_current_branch() {
    ret=$(command -v git >/dev/null 2>&1 && git symbolic-ref --quiet --short HEAD 2>/dev/null)
    echo -n "${ret}"
}

my_python_with_dotenv() {
  if command -v dotenv >/dev/null 2>&1 && [ -f .env ]; then
    dotenv run -- python3 "$@"
  else
    python3 "$@"
  fi
}
