#!/bin/zsh
setopt HIST_NO_FUNCTIONS
setopt HIST_IGNORE_SPACE
setopt HIST_IGNORE_DUPS

my_zsh_profile=${(%):-%N}
_source_dir=$(dirname $(readlink -f ${my_zsh_profile}))
_my_func_lib_name=my_funcs
if [ -f ${my_zsh_profile} ]
then
    if [ -f ${_source_dir}/${_my_func_lib_name} ]
        then
        \. ${_source_dir}/${_my_func_lib_name}
        _my_bash_init
    fi
fi

_my_process_plugin() {
    local my_plugin=$1
    shift
    local my_plugin_cmd=$@
    mkdir -p $ZSH/custom/plugins/${my_plugin}
    if [ -f ~/.update ]
    then
        echo "updating ${my_plugin} plugin"
        eval ${my_plugin_cmd}
    fi
}

_remove_update_plugin() {
    [ -f ~/.update ] && rm -f ~/.update
}

if [ -f "${HOME}/.oh-my-zsh/oh-my-zsh.sh" ]
then
    export ZSH="${HOME}"/.oh-my-zsh
    plugins=(git $podman_plugin $poetry_plugin)
    echo "enabled oh-my-zsh plugins: ${plugins}"
    ZSH_THEME="xiong-chiamiov-plus-fork"
    echo "setting theme to: ${ZSH_THEME}"

    # setup custom plugins for command completion for zsh
    command -v podman > /dev/null && \
        _my_process_plugin podman "podman completion zsh -f $ZSH/custom/plugins/podman/_podman"
    command -v poetry > /dev/null && \
        _my_process_plugin poetry "poetry completions zsh > $ZSH/custom/plugins/poetry/_poetry"
    if [ -f $ZSH/custom/plugins/podman/_podman ]
    then
        echo "has podman plugin"
        podman_plugin=podman
    fi
    if [ -f $ZSH/custom/plugins/poetry/_poetry ]
    then echo "has poetry plugin"
        poetry_plugin=poetry
    fi

    source "$ZSH/oh-my-zsh.sh"
fi

_remove_update_plugin

command -v kubectl >/dev/null && source <(kubectl completion zsh)

# Which plugins would you like to load?
# Standard plugins can be found in $ZSH/plugins/
# Custom plugins may be added to $ZSH_CUSTOM/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.


ucp_bundle=${HOME}/ucp-bundle
if [ -f ${ucp_bundle}/env.sh ]
then
    . ${ucp_bundle}/env.sh
    export DOCKER_CERT_PATH=${ucp_bundle}
fi

## setup to use nvm
[ -d ~/.nvm ] && \
export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

## setup autocompletion

bindkey -v
## setup fzf keybinding
[ -f ~/.fzf.zsh  ] && \. ~/.fzf.zsh && export FZF_COMPLETION_TRIGGER='~~'

# SETUP ALIAS

if [ -f "${HOME}/.my_alias" ]
then
    . "${HOME}/.my_alias"
fi


[ -f /home/linuxbrew/.linuxbrew/bin/brew ] && eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
n_open_file_limit=$(ulimit -n)
n_open_file_hard_limit=$(ulimit -Hn)
if [ $n_open_file_limit -eq 1024 ]
then
    if [ "$n_open_file_hard_limit" = "ulimited" ] || [ $n_open_file_hard_limit -gt 65535 ] 
    then
        ulimit -n 65535
    else
        ulimit -n ${n_open_file_hard_limit}
    fi
fi

if [ -f ~/.my_env ]
then
    source ~/.my_env
fi

if [ -f ${HOME}/.my_env_onetime_only ]
then
    source ${HOME}/.my_env_onetime_only
    rm -f ${HOME}/.my_env_onetime_only
fi

if [ ! -z "${MY_ADDITIONAL_SOURCES}" ]
then
    for shell_source in $(echo -n "${MY_ADDITIONAL_SOURCES}")
    do
        \. ${shell_source}
    done
fi

command -v rbenv > /dev/null && eval "$(rbenv init -)"
